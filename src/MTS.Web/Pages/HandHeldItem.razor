@using MTS.Application.LunchList.Queries
@using MTS.Application.LunchList
@using MTS.Application.LunchList.Commands
@using MediatR
@inject IMediator Mediator
@inject UserVoteService UserVoteService


<MudCardContent >
  @{
    var style = Date.Date.Equals(DateTime.Today)  ? Theme.Palette.GrayLight : "";
  }
  <MudPaper
    Class="pa-4"
    Style="@($"background: {style}" + "; height: 100%;")"
    Width="300px">
    <MudGrid Justify="Justify.SpaceBetween">
      <MudItem xs="8">
        <MudGrid >
          <MudItem xs="12">
            <MudText >@Date.ToShortDateString()</MudText>

          </MudItem>
          <MudItem xs="12">
            <MudText >@HandHeldContainer.data.data.nimi</MudText>
          </MudItem>

        </MudGrid>
      </MudItem>
      <MudItem xs="2">
        @if (false)
        {
          <MudImage
            Class="lunchOfDay"
            Height="32"
            Src="./gold-medal.png">
          </MudImage>
        }
        @if(UserVoteService.IsUserVoted(HandHeldContainer.data.data.ravintolaid,Date))
        {
          //Mudblazor checkmark icon
          <MudIcon Icon="@Icons.Filled.Check" />

        }
        else
        {
          if (UserVoteService.AllowedToVote(HandHeldContainer.data.data.ravintolaid,Date))
          {
            <MudIcon
              Style="cursor: pointer"
              Icon="@Icons.Filled.ThumbUp"
              @onclick="() => VoteUp(HandHeldContainer.data.data.ravintolaid,Date)"
            />
          }
        }
        @* <MudText>@(HandHeldContainer != 0 ? LunchListRow.Votes : "")</MudText> *@
      </MudItem>
      <MudItem xs="12">
        @((MarkupString)string.Join(@$"\n", HandHeldContainer.toList.OrderBy(x => x.data.rivi).Select(x => x.data.teksti)))

      </MudItem>
    </MudGrid>

  </MudPaper>
</MudCardContent>

@code {

  [Parameter]
  public Index.HandHeldContainer? HandHeldContainer { get; set; }
  [Parameter]
  public DateTime Date { get; set; }


  private MudTheme Theme = new MudTheme();
  private string _currentDayString = (DateTime.Now.Year * 10000 + DateTime.Now.Month * 100 + DateTime.Now.Day).ToString();

  private void VoteUp(LunchListVm lunchListVm)
  {
    Console.WriteLine(lunchListVm);
    var result = new VoteUpLunchListCommand(){LunchListRef = lunchListVm.RefString};
    Mediator.Send(result);
    lunchListVm.Votes++;
    RegisterVoteAsync(lunchListVm);
  }

  protected override void OnAfterRender(bool firstRender)
  {
    UserVoteService.UserVotesStateChanged += UserVoteServiceUserVotesStateChanged;
    base.OnAfterRender(firstRender);
  }

  private void UserVoteServiceUserVotesStateChanged(object? sender, EventArgs e)
  {
    InvokeAsync(StateHasChanged);
  }

  private async Task RegisterVoteAsync(LunchListVm lunchListVm)
  {
    UserVoteService.AddVote(lunchListVm.DateString, lunchListVm.Restaurant.ravintolaid);
  }

  private void VoteUp(int lunchListVm, DateTime date)
  {
    throw new NotImplementedException();
  }

}
