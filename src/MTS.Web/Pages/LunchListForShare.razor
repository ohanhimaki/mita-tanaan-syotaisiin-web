@using MTS.FetchData
@inject IJSRuntime JSRuntime
<MudContainer>

  <MudCard>
    @* buttons for every weekday *@

    <MudCardContent>
      @for (var i = 1; i <= 5; i++)
      {
        var day = i;
        <MudButton Variant="Variant.Filled" Color="SelectedDay == day ? Color.Primary : Color.Default" OnClick="() => SelectedDay = day">@GetDayOfWeekFi(day)</MudButton>
      }
      <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="DownloadImages">Download images</MudButton>
    </MudCardContent>
  </MudCard>




  @if (Lists is not null)
  {
    var emojiCount = 1;
    <MudGrid Style="box-shadow: unset !important;">
    @foreach (var lunchListContainer in Lists.Where(x => x.DayNumber == SelectedDay ||x.DayNumber == 999).OrderBy(x => x.RestaurantManagement.nimi))
    {
      var emoji = lunchListContainer.RestaurantManagement.emoji ?? GetEmoji(emojiCount++);
      <MudItem xs="12" sm="6" md="4">
        <div id="@lunchListContainer.RestaurantManagement.nimi">

        <MudCard Class="m-4 to-image">
          <MudCardContent>


            <MudText @onclick="() => DownloadImage(lunchListContainer.RestaurantManagement.nimi)" Class="file-name" Typo="Typo.h4" Color="Color.Primary">@emoji @lunchListContainer.RestaurantManagement.nimi</MudText>
            <br/>
            @((MarkupString)lunchListContainer.DescriptionHtml)
          </MudCardContent>
        </MudCard>
        </div>
      </MudItem>
    }
    </MudGrid>
  }
</MudContainer>

@code {

  [Inject]
  HttpClient Http { get; set; }
  public int SelectedDay { get; set; } = 1;

  protected override void OnInitialized()
  {
    SelectedDay = (int)DateTime.Now.DayOfWeek;
    base.OnInitialized();
  }

  protected override Task OnParametersSetAsync()
  {
    if (Lists is null)
    {
      InitializeLists();
    }
    return base.OnParametersSetAsync();
  }

  private async Task InitializeLists()
  {
    Restaurants = await GetRestaurantsFromJson();

    try
    {
      var lists = await LunchListFetcher.GetLunchListAsync(Restaurants);
      Lists = lists;
      await InvokeAsync(StateHasChanged);
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      throw;
    }
  }

  public List<RestaurantManagement> Restaurants { get; set; }

  private async Task<List<RestaurantManagement>> GetRestaurantsFromJson()
  {
  // return list from restaurants.json wwwroot with httpclient get request


    var list = await Http.GetFromJsonAsync<List<RestaurantManagement>>("/restaurants.json");
    return list;
  }

  public List<LunchListContainer>? Lists { get; set; }

  private async Task DownloadImages()
  {
    await JSRuntime.InvokeVoidAsync("captureAndDownloadImages");
  }


  private string GetEmoji(int i)
  {
    // list of 10 face emojis
    var emojis = new List<string> { "😀", "😃", "😄", "😁", "😆", "😅", "😂", "🤣", "😊", "😇" };
    return emojis[i % 10];
  }

  private string GetDayOfWeekFi(int day)
  {
    return day switch
    {
      1 => "Ma",
      2 => "Ti",
      3 => "Ke",
      4 => "To",
      5 => "Pe",
      _ => "??"
    };
  }

  private async Task DownloadImage(string restaurantManagementNimi)
  {
    Console.WriteLine(restaurantManagementNimi);
    await JSRuntime.InvokeVoidAsync("captureAndDownloadImage", restaurantManagementNimi);
  }

}
