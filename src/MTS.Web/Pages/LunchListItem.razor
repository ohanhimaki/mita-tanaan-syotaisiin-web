@using MTS.Application.LunchList.Queries
@using MTS.Application.LunchList
@using MTS.Application.LunchList.Commands
@using MediatR
@inject IMediator Mediator
@inject UserVoteService UserVoteService


<MudCardContent >
  @{
    var style = LunchListRow.DateString != _currentDayString ? Theme.Palette.GrayLight : "";
  }
  <MudPaper
    Class="pa-4"
    Style="@($"background: {style}" + "; height: 100%;")"
    Width="300px">
    <MudGrid Justify="Justify.SpaceBetween">
      <MudItem xs="6">
        <MudGrid >
          <MudItem xs="12">
            <MudText >@LunchListRow.DateString</MudText>

          </MudItem>
          <MudItem xs="12">
          <MudText >@LunchListRow.Restaurant.nimi</MudText>
          </MudItem>

        </MudGrid>
      </MudItem>
      <MudItem xs="4">
        <MudGrid Justify="Justify.FlexEnd" Spacing="2">

          @if (LunchListRow.LunchOfDay)
          {
            <MudImage
              Class="lunchOfDay"
              Height="32"
              Src="./gold-medal.png">
            </MudImage>
          }
          <MudItem>
            <MudGrid Justify="Justify.FlexEnd">
              <MudItem xs="6">
                <MudText>@(LunchListRow.Predictions != 0 ? LunchListRow.Predictions.ToString("0.##") : "")</MudText>
              </MudItem>
              <MudItem xs="6">
                @{
                  var style = LunchListRow.Predicted ? "" : "filter: grayscale(100%)";
                }
                <MudImage
                  Style="@style"
                  Class="lunchOfDayMaybe"
                  Height="32"
                  Src="./icon-512.png">
                </MudImage>
              </MudItem>

            </MudGrid>
          </MudItem>
          <MudItem>
            <MudGrid Justify="Justify.FlexEnd">
              <MudItem xs="6">
                <MudText>@(LunchListRow.Votes != 0 ? LunchListRow.Votes : "")</MudText>
              </MudItem>
              <MudItem xs="6">
                @if (UserVoteService.IsUserVoted(LunchListRow))
                {
                  //Mudblazor checkmark icon
                  <MudIcon Icon="@Icons.Filled.Check"/>
                }
                else
                {
                  if (UserVoteService.AllowedToVote(LunchListRow))
                  {
                    <MudIcon
                      Style="cursor: pointer"
                      Icon="@Icons.Filled.ThumbUp"
                      @onclick="() => VoteUp(LunchListRow)"/>
                  }
                }
              </MudItem>
            </MudGrid>
          </MudItem>
        </MudGrid>
      </MudItem>
      <MudItem xs="12">
    @((MarkupString)LunchListRow.Lunch)

      </MudItem>
    </MudGrid>

  </MudPaper>
</MudCardContent>

@code {

  [Parameter]
  public LunchListVm LunchListRow { get; set; }


  private MudTheme Theme = new MudTheme();
  private string _currentDayString = (DateTime.Now.Year * 10000 + DateTime.Now.Month * 100 + DateTime.Now.Day).ToString();

  private void VoteUp(LunchListVm lunchListVm)
  {
    Console.WriteLine(lunchListVm);
    var result = new VoteUpLunchListCommand(){LunchListRef = lunchListVm.RefString};
    Mediator.Send(result);
    lunchListVm.Votes++;
    RegisterVoteAsync(lunchListVm);
  }

  protected override void OnAfterRender(bool firstRender)
  {
    UserVoteService.UserVotesStateChanged += UserVoteServiceUserVotesStateChanged;
    base.OnAfterRender(firstRender);
  }

  private void UserVoteServiceUserVotesStateChanged(object? sender, EventArgs e)
  {
    InvokeAsync(StateHasChanged);
  }

  private async Task RegisterVoteAsync(LunchListVm lunchListVm)
  {
    UserVoteService.AddVote(lunchListVm.DateString, lunchListVm.Restaurant.ravintolaid);
  }

}
