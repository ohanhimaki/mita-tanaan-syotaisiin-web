@page "/"
@inject IMediator Mediator
@using MTS.Application.LunchList.Queries
@using MediatR
@using MTS.Web.Shared.Data

<MudContainer
  MaxWidth="MaxWidth.ExtraLarge">

  <MudGrid>
    <MudItem xs="8">
      <MudDatePicker Label="Päivä" @bind-Date="StartDate"/>
    </MudItem >
    <MudItem xs="4" >
      <MudSwitch T="bool" @bind-Checked="@ShowOnlyPredictedWinners" ></MudSwitch>
      <MudImage
        Class="lunchOfDayMaybe"
        Height="32"
        Src="./icon-512.png">
      </MudImage>
    </MudItem >
  </MudGrid>
  <div style="overflow-x:scroll; overflow-y: hidden">

    <div
      style="max-width: 9999px; min-width: 100%">
      @if (LunchListRowsGroupedByRestaurant is null)
      {
        <MudText>Ladataan</MudText>
      }
      else
      {
        @if (!ShowOnlyPredictedWinners)
        {
          foreach (var lunchListRow in LunchListRowsGroupedByRestaurant.Where(x => x is not null))
          {
            <LunchListItemsByRestaurantRow LunchListRowGroupedByRestaurant="@lunchListRow.ToList()"/>
          }
        }
        else
        {
          <LunchListPredictedWinners LunchLists="@LunchListRowsGroupedByRestaurant.SelectMany(x => x.ToList()).ToList()"/>
        }
      }
    </div>
  </div>
</MudContainer>


@code {

  [Inject]
  protected IJSRuntime _JS { get; set; }
  public bool IsMobile { get; set; } = false;

  public bool ShowOnlyPredictedWinners { get; set; } = false;


  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
        Console.WriteLine("tulee tähän: " + IsMobile);
      if (firstRender)
      {
        try
        {
          int innerWidth = await BrowserService.GetInnerWidth(_JS);

          Console.WriteLine("InnerWidth: " + innerWidth);
          if (innerWidth < 480)
             IsMobile = true;
         else
             IsMobile = false;

        Console.WriteLine("IsMobile: " + IsMobile);


        }
        catch (Exception e)
        {
          Console.WriteLine(e);
          throw;
        }
        RefreshLunchList();
      }
  }

  private async Task RefreshLunchList()
  {
    //Startdate is monday of current week as yyyyMMdd
      int startDate;
      int endDate;

    if (!IsMobile)
    {
      startDate = _startDate.Value.DateOfWeek(DayOfWeek.Monday).ToInt();
      endDate = _startDate.Value.DateOfWeek(DayOfWeek.Friday).ToInt();

    }
    else
    {
      if (_startDate is null || _startDate.Value.ToInt() == DateTime.Today.ToInt())
      {
        if (DateTime.Today.DayOfWeek == DayOfWeek.Saturday ||
            DateTime.Today.DayOfWeek == DayOfWeek.Sunday)
        {
          startDate = DateTime.Today.DateOfWeek(DayOfWeek.Monday).ToInt();
          endDate = DateTime.Today.DateOfWeek(DayOfWeek.Friday).ToInt();

        }
        else
        {

        startDate = DateTime.Today.ToInt();
        endDate = _startDate.Value.DateOfWeek(DayOfWeek.Friday).ToInt();
        }
      }
      else
      {
        startDate = _startDate.Value.ToInt();
        endDate = _startDate.Value.ToInt();
      }
    }


     var lunchListResponses = (await Mediator.Send(new GetLunchListQuery
    {
      StartDate = startDate,
      EndDate = endDate
    }))
      .OrderBy(x => x.Restaurant.nimi)
      .ThenBy(x => x.DateString)
      .ToList();

    // group by restaurant
    LunchListRowsGroupedByRestaurant = lunchListResponses.GroupBy(x => x.Restaurant.nimi);
    await InvokeAsync(StateHasChanged);
  }

  public IEnumerable<IGrouping<string, LunchListVm>> LunchListRowsGroupedByRestaurant { get; set; }

  public DateTime? StartDate
  {
    get => _startDate;
    set
    {
      _startDate = value;
      if (_startDate is null) return;
      RefreshLunchList();
    }
  }



  private DateTime? _startDate = DateTime.Now;
}
