@page "/"
@inject IMediator Mediator
@using MTS.Application.LunchList.Queries
@using MediatR
@using MTS.Web.Shared.Data

<MudContainer
  MaxWidth="MaxWidth.ExtraLarge">

    <MudDatePicker Label="Päivä" @bind-Date="StartDate"/>
    <div style="overflow-x:scroll; overflow-y: hidden">

    <div
        style="max-width: 9999px; min-width: 100%"
    >
      @if (LunchListRowsGroupedByRestaurant is null)
      {
        <MudText>Ladataan</MudText>
      }
      else
      {
        foreach (var lunchListRow in LunchListRowsGroupedByRestaurant.Where(x => x is not null))
        {
          <LunchListItemsByRestaurantRow LunchListRowGroupedByRestaurant="@lunchListRow.ToList()"/>
        }
      }
    </div>
    </div>
</MudContainer>


@code {
  [CascadingParameter]
    public bool? IsMobile { get; set; }

  protected override async Task OnInitializedAsync()
  {
      Console.WriteLine("Tulee index");
    try
    {
      await RefreshLunchList();
      await base.OnInitializedAsync();
    }
    catch (Exception e)
    {
      Console.WriteLine(e);
      throw;
    }
  }

  private async Task RefreshLunchList()
  {
    //Startdate is monday of current week as yyyyMMdd
      int startDate;
      int endDate;
    if (!IsMobile ?? false)
    {
      startDate = _startDate.Value.DateOfWeek(DayOfWeek.Monday).ToInt();
      endDate = _startDate.Value.DateOfWeek(DayOfWeek.Friday).ToInt();

    }
    else
    {
      if (_startDate is null || _startDate.Value.ToInt() == DateTime.Today.ToInt())
      {
        startDate = DateTime.Today.ToInt();
      }
      else
      {
        startDate = _startDate.Value.DateOfWeek(DayOfWeek.Monday).ToInt();
      }
      endDate = _startDate.Value.DateOfWeek(DayOfWeek.Friday).ToInt();
    }


     var lunchListResponses = (await Mediator.Send(new GetLunchListQuery
    {
      StartDate = startDate,
      EndDate = endDate
    }))
      .OrderBy(x => x.Restaurant.nimi)
      .ThenBy(x => x.DateString)
      .ToList();

    // group by restaurant
    LunchListRowsGroupedByRestaurant = lunchListResponses.GroupBy(x => x.Restaurant.nimi);
    await InvokeAsync(StateHasChanged);
  }

  public IEnumerable<IGrouping<string, LunchListVm>> LunchListRowsGroupedByRestaurant { get; set; }

  public DateTime? StartDate
  {
    get => _startDate;
    set
    {
      _startDate = value;
      if (_startDate is null) return;
      RefreshLunchList();
    }
  }



  private DateTime? _startDate = DateTime.Now;
}
