@page "/fetchdata"
@using MTS.Application.LunchList.Queries
@using MediatR
@inject HttpClient Http
@inject IMediator Mediator

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
  <p>
    <em>Loading...</em>
  </p>
}
else
{
  <table class="table">
    <thead>
    <tr>
      <th>Date</th>
      <th>Temp. (C)</th>
      <th>Temp. (F)</th>
      <th>Summary</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var forecast in LunchListRows)
    {
      <tr>
        <td>@forecast.nimi</td>
        <td>@forecast.lunch</td>
        <td>@forecast.restaurantid</td>
        <td>@forecast.link</td>
      </tr>
    }
    </tbody>
  </table>
}

@code {
  private WeatherForecast[]? forecasts;

  protected override async Task OnInitializedAsync()
  {
    forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
    // LunchListRows = await Http.GetFromJsonAsync<LunchListRow[]>("http://localhost:3002/api/listat?paiva=20221023&endDate=20221030");
    // LunchListRows = (await Mediator.Send(new GetLunchListQuery())).ToList();
  }

  public List<LunchListRow>? LunchListRows { get; set; }


  public class WeatherForecast
  {
    public DateTime Date { get; set; }

    public int TemperatureC { get; set; }

    public string? Summary { get; set; }

    public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
  }

  // public class LunchListRow
  // {
  //
  //   public string date { get; set; }
  //   public int restaurantid { get; set; }
  //   public int   votes { get; set; }
  //   public string nimi { get; set; }
  //   public string lunch { get; set; }
  //   public string link { get; set; }
  // }

}
